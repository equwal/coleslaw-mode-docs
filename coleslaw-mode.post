;;;;;
title: Coleslaw-mode
format: cl-who
date: 2019-06-09
excerpt: An Emacs mode for authoring Coleslaw posts and pages.
image: /static/coleslaw.png
url: coleslaw-mode
tags: release
;;;;;

(:h2 (esc "An Emacs mode for authoring Coleslaw posts and pages."))
(:h3 (esc "Beta: Version 0.2.4"))
(:h4 "Mode for editing "
     (:a :href "https://github.com/kingcons/coleslaw" "Coleslaw")
     " files.")
(:h4 (esc "What does it do?"))
(:p (esc "When opening a new .page or .post file, coleslaw mode will help you
insert the metadata headers for the post. It will also help you choose the right
mode, based on the format style for the page. All this is done automatically 
when a file is opened")
    " after changing the \"format: \" field.")
(:p (esc "Example metadata header:")
 :br
    (:code ";;;;;"
     :br
           "title: Example"
     :br
           "format: md (coleslaw-mode prevents wrong format values)"
     :br
           "date: 1970-01-01 (automatically the current date)"
     :br
           ";;;;;"))
(:p "This prevents errors when writing the header, and the mode dispatch
prevents typing \"M-x markdown-mode\" or a similar mode-setting commands when
opening a file for Coleslaw.")
(:h4 (esc "How do I install it?"))
(:p (esc "Either from source (via ")
    (:a :href "https://framagit.org/steckerhalter/quelpa" "Quelpa")
    (esc ") or from Melpa, once coleslaw-mode is accepted in this version of
    Melpa. Putting this in your init file:")
 :br
    (:code (esc "(coleslaw-setup)"))
 :br
    (esc "is enough to get you setup with the standard mode decisions of the
    author. You might need to install the dependencies. See them in the ")
    (:code "coleslaw-modes")
    " variable.")
(:h5 "Optional Dependencies")
(:ul (:li (esc "For markdown syntax highlighting, ")
          (:a :href "https://jblevins.org/projects/markdown-mode/"
              "markdown-mode")
          ".")
     (:li (esc "For a preview of the markdown, ")
          (:a :href "https://github.com/niku/markdown-preview-eww"
              "Markdown-preview-eww")
          (esc " (via (M/Q)elpa)."))
     (:li (esc "Note that the eww (Emacs Web Wowser) has special OS level
     dependencies.")))
(:h4 (esc "How do I customize it?"))
(:p (esc "If you don't like ")
    (:code (esc "(coleslaw-setup)"))
    (esc " then consider modifying"))

(:code (esc "coleslaw-formats"))
(:p (esc "for choosing which modes to dispatch based on the header."))
(:code (esc "(add-to-list 'auto-insert-alist '(\".coleslaw\" . 
coleslaw-insert-header))")):br
(:code (esc "(add-to-list 'auto-mode-alist '(\"\\\\.coleslaw\\\\'\" 
. coleslaw-mode))"))
(:p (esc "are helpful templates for adding file types (in this case replace
.coleslaw with the file type of choice)."))

(:p (esc "There are some configuration choices not built into the default setup,
since they are not conservative enough choices:")
 :br
    (:ul (:li "Markdown live preview for md, generates a web browser buffer to
    help you edit.")
         (:li "Lisp has a number of editing modes (useful with cl-who) which
         overlap to a great extent and are highly personal. Add them as hooks to
         lisp-mode, or write your own " (:code "coleslaw-default-format-modes") ".")))

(:h4 "Troubleshooting")
(:h5 "Wrong separator")
(:p (esc "If your file contains any ")
    (:code "\";;;;;\"")
    (esc " that isn't the header separator,
coleslaw-mode will break. You can change the separator in the .coleslawrc for
Coleslaw, and in coleslaw-mode with ")
    (:code "(setq coleslaw-separator \"-----\")")
    (esc " or a different choice of separator in your init file."))

(:h4 "How can I contribute or get help?")

                (:p (esc "Coleslaw-mode is still an early project. It doesn't have (but would be
nice to have) customizable variables, realtime integration with slime or sly,
realtime integration with colesleaw, better and/or autogenerated docs, be added
to popular code repos, and is generally unfinished and buggy. The ")
                    (:a :href "#todo" "TODO")
                    (esc " is a good place to start."))

(:p "Coleslaw has a channel on freenode: " (:strong (esc "#coleslaw")))
(:p "Coleslaw might get a mailing list at some point, and if it did, you could
subscribe.")

(:h5 "Edit documentation")

(:div :class "press" (:div :class "logo" (:img :src
                                               "/static/github.png" :alt "Github's logo"))
      (:a :href
          "https://github.com/equwal/coleslaw-mode-docs"
          "The coleslaw-mode docs are available for free collaboration on
          github."))

(:div :class "press" (:div :class "logo" (:img :src
                                                    "/static/github.png" :alt "Github's logo"))
      (:a :href
          "https://github.com/equwal/coleslaw" "Source code for coleslaw-mode"))

(:div :class "press"
      (:div :class "logo"
            (:img :src "/static/coleslaw.png"
                  :alt (esc "Coleslaw static content generator
logo. Plays with ;TODO: he word coleslaw a bit, replacing the O with parentheses, the
L with a λ, the e with a ∈, and ending with a quod erat demonstrandum marker
square (tombstone/halmos), □.")))
      (:a :href "https://github.com/kingcons/coleslaw"
          "Contribute to coleslaw, the Common Lisp static
                          content generator."))

(:h4 (:a :class "jump" :name "todo" "TODO"))

(:ul (:li "Bind emacs commands for interacting with coleslaw via "
          (:a :href "https://common-lisp.net/project/slime/" "slime")
          " and sly."
          " For example: to push up the code, or to commit it.")
     (:li "Add org-mode to coleslaw and coleslaw-mode")
     (:li (esc "Customizable variables via Emac's customization utility"))
     (:li (esc "Realtime coleslaw generation, like with markdown-live-preview
modes."))
     (:li (esc "Autogenerated docs"))
     (:li (esc "Get on Melpa."))
     (:li (esc "Fix/categorize/report bugs (github issues).")))
